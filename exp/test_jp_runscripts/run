#!/usr/bin/env bash
# A very simple script to run the Held Suarez test case.  Starts with a zero
# background and spins up the model for a number of days, configured in the
# input file `input.nml`.
#
# This script ensures that environment variables are set correctly, loads
# the appropriate tools and then runs the Held Suarez case according
# to the setup configuration and output directives in `diag_table`.
#
#
# 29.09.15 - James Penn <jp492@exeter.ac.uk>
# This is the minimal runjob script. It has 3 tasks
# 1. Ensure that environment variables are set
# 2. Load the appropriate versions of tools and config via the `module` command
# 3. Run the `runmonth` for a given number of months
# ---------
# 01.10.15 - James Penn <jp492@exeter.ac.uk>
# Renamed to `run` and months are offset by 1 so './run 13 24' creates output for run_13 ... run_24
# instead of run_14 ... run_25
# Now takes two command line args ./run <from month> <to month>
# ---------
# 05.10.15 - James Penn <jp492@exeter.ac.uk>
# Copied into GFDLdryModel and configured to run the Held Suarez test case

# 1. Check that the GFDL environment variables has been set.
# These allow the runscripts to find code and direct the model
# to temporary working directory 
# GFDL_BASE: This should be the base directory of the MoistModel repository
# GFDL_WORK: A temporary working area
# GFDL_DATA: Where output datafiles should be stored.  This is the base directory
#            individual experiments will be stored in $GFDL_DATA/$exp_name
# e.g. in your terminal window, do something like (changing usernames)
#     $ cd /scratch/jp492/GFDLdryModel
#     $ export GFDL_BASE=`pwd`
#     $ export GFDL_WORK=/tmp/jp492
#     $ export GFDL_DATA=/scratch/jp492/gfdl_data
#     $ cd experiments/spectral_barotropic
#     $ ./runjob | tee run.log
: ${GFDL_BASE?"GFDL_BASE location needs to be set."}
: ${GFDL_WORK?"GFDL_WORK location needs to be set."}
: ${GFDL_DATA?"GFDL_DATA location needs to be set."}

# 2. Load the necessary tools into the environment
source $GFDL_BASE/src/extra/loadmodule	
module list
ulimit -s unlimited # Set stack size to unlimited

platform=ia64
npes=8
exp_name=test_jp_runscripts
exp_path=$GFDL_BASE/exp/$exp_name
write_over_data=false

workdir=$GFDL_WORK/$exp_name							  # base working directory
base_arc=$GFDL_DATA/$exp_name							# storing data in location other than workdir (eg archived data) 

dir_base=$GFDL_BASE
source_dir=$dir_base/src

spin_up_restarts=$GFDL_DATA/$exp_name/restarts
input_namelist=$exp_path/input.nml
core_namelist=$exp_path/core.nml											#dynamis namelist
phys_namelist=$exp_path/phys.nml											#physics namelist
diag_table=$exp_path/diag_table										#vars to output
field_table=$exp_path/field_table

compile_dir=$exp_path/exec.$platform	         			#compiled code location
executable=$compile_dir/fms_moist.x   							#compiled executable
path_names=$exp_path/path_names



export MALLOC_CHECK_=0
mkdir -p $workdir
# ************************************************************
#remove old files from within the working directory
  echo blah > $workdir/blah
  rm -rf $workdir/* >& /dev/null
# ************************************************************

cd $workdir
mkdir INPUT RESTART
  cp  $diag_table diag_table
  cp  $field_table field_table
  cp  $input_namelist input.nml

#check if data already exists. Override data only when flag is true
if [ -d $base_arc'/run_'$out ]; then
  if [ $write_over_data == false ]; then
     echo "file already exists for run_$out"
     exit 2
  fi
fi

mpirun -np $npes $executable

if [ $npes > 1 ]; then
 for ncfile in `/bin/ls *.nc.0000`; do
    $GFDL_BASE/postprocessing/mppnccombine.x $ncfile				
    if [ $? == 0 ]; then
    	rm -f $ncfile.????
    fi
 done
fi

mkdir -p $GFDL_DATA/$exp_name
mv *.nc $GFDL_DATA/$exp_name
echo "Experiment complete.  Data stored at $GFDL_DATA/$exp_name"
